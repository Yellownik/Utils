[user]
	feature = v15.0.0/feature
	build = v14.0.0/build
[alias]
	branch-name="!git rev-parse --abbrev-ref HEAD"
	prev-branch="!git name-rev $(git rev-parse @{-1}) --name-only"
	rih="!f() { git rebase -i head~\"$1\"; }; f"
	hide="!git update-index --assume-unchanged"
	unhide="!git update-index --no-assume-unchanged"
	log-long = log --date'=format:"%d-%b %H:%M:%S"' --format'=format:"%C(red)%h%C(reset)%C(auto)%d%C(reset) - %C(bold blue)%an%C(reset) - %C(cyan)%ad%C(reset)%n %C(white)%s%C(reset)"'
	history = !git log-long --graph --abbrev-commit --decorate
	add-ours = "!f() { git checkout --ours \"$1\" && git add \"$1\"; }; f"
	add-their = "!f() { git checkout --theirs \"$1\" && git add \"$1\"; }; f"
	status-grep = "!f() { git status | grep \"$1\"; }; f"
	got-origin = "!f() { git checkout --track origin/\"$1\"; }; f"
	my-commits = "!f() { git log --all --oneline --decorate --no-merges --date=format:'%d-%b %H:%M:%S' --pretty=format:'%C(cyan)%ad%C(reset) %C(white)%s%C(reset)' --author=$(git config user.email); }; f"
	standup = "!if [ $(date +%u) -eq 1 ]; then git my-commits --since=last.friday.midnight; else git my-commits --since=yesterday.midnight; fi;"
[color]
	branch = true
	decorate = true
	ui = auto
	status = true
[color "decorate"]
	HEAD = red black reverse
	branch = yellow black bold
	remoteBranch = yellow black dim
[color "status"]
	untracked = magenta black bold
[core]
	autocrlf = true
	whitespace = cr-at-eol
	safecrlf = false
[difftool "sourcetree"]
	cmd = 'C:/Program Files/Unity/Hub/Editor/2018.2.20f1/Editor/Data/Tools/UnityYAMLMerge.exe' merge -p $BASE $LOCAL $REMOTE $MERGED
[mergetool "sourcetree"]
	cmd = 'C:/Program Files/Unity/Hub/Editor/2018.2.20f1/Editor/Data/Tools/UnityYAMLMerge.exe' merge -p $BASE $LOCAL $REMOTE $MERGED
	trustExitCode = true
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
